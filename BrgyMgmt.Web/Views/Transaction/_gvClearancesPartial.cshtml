@using BrgyMgmt.Web.Models;

@{
    var grid = Html.DevExpress().GridView(settings => {
        settings.Name = "gvClearances";
        settings.CallbackRouteValues = new { Controller = "Transaction", Action = "gvClearancesPartial" };
        ViewData["Source"] = "Clearance";

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Transaction", Action = "gvClearancesPartialAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Transaction", Action = "gvClearancesPartialUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Transaction", Action = "gvClearancesPartialDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsBehavior.ConfirmDelete = true;
        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);

        settings.CommandColumn.ShowClearFilterButton = true;
        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowDeleteButton = User.IsInRole("SA") || User.IsInRole("Administrator");
        settings.CommandColumn.ShowEditButton = true;
        settings.CommandColumn.ShowNewButtonInHeader = true;
        settings.CommandColumn.Width = 100;

        settings.SettingsPager.PageSize = 10;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.KeyFieldName = "ClearanceId";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCellsWindowLimit;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 500;

        settings.Columns.Add(col => {
            col.Width = 100;
            col.SetDataItemTemplateContent(c => {
                Html.DevExpress().Button(btn => {
                    btn.Name = "btn" + c.KeyValue;
                    btn.Text = "Print";
                    btn.ClientSideEvents.Click = "function(s, e) { showClearanceReportViewer('" + c.KeyValue + "')}";
                }).GetHtml();
            });
        });
        settings.Columns.Add("ClearanceId");
        settings.Columns.Add("Resident.FullName");
        settings.Columns.Add("IssuedDate");
        settings.Columns.Add("CTC");
        settings.Columns.Add("CTCDate");
        settings.Columns.Add("ORNumber");
        //settings.Columns.Add("Comelec");
        //settings.Columns.Add("Resident");
        settings.Columns.Add("MaintenanceTables").Visible = false;
        settings.InitNewRow = (s, e) => {
            e.NewValues["IssuedDate"] = DateTime.Now;
        };
        settings.SetEditFormTemplateContent(c => {
            var item = ViewData["item"] != null ? ViewData["item"] : c.DataItem;

            ViewContext.Writer.Write("<div class=\"editform col-md-6\" style='float:left;'>");

            Html.DevExpress().Label(lbl => { lbl.ControlStyle.CssClass = "fl"; lbl.Text = "Search | Change"; lbl.AssociatedControlName = "SearchResident"; }).GetHtml();
            Html.RenderPartial("_cmbResidentSearchPartial");


            ViewBag.Source = "Clearance";
            Html.DevExpress().Label(lbl => { lbl.ControlStyle.CssClass = "fl"; lbl.Text = "Resident"; lbl.AssociatedControlName = "ResidentId"; }).GetHtml();
            Html.DevExpress().ComboBox(cmb => {
                cmb.Name = "ResidentName";
                cmb.Properties.IncrementalFilteringMode = IncrementalFilteringMode.None;
                //cmb.Width = System.Web.UI.WebControls.Unit.Pixel(200);
                cmb.ClientEnabled = false;
                cmb.Properties.DropDownButton.Visible = false;
                cmb.Properties.ValueField = "Id";
                cmb.Properties.TextField = "Name";
                cmb.Properties.ValueType = typeof(int);
            }).BindList(ViewBag.Residents).Bind(DataBinder.Eval(item, "ResidentId")).Render();

            Html.DevExpress().TextBox(cfg => {
                cfg.Name = "ResidentId";
                cfg.ClientVisible = false;
            }).Bind(DataBinder.Eval(item, "ResidentId")).Render();

            Html.DevExpress().Label(lbl => { lbl.ControlStyle.CssClass = "fl"; lbl.Text = "Date Issued:"; lbl.AssociatedControlName = "IssuedDate"; }).GetHtml();
            Html.DevExpress().DateEdit(cfg => {
                cfg.Name = "IssuedDate";
                cfg.Properties.EditFormat = EditFormat.DateTime;
                cfg.Properties.DisplayFormatString = "MM/dd/yyyy";
                cfg.ShowModelErrors = true;
                cfg.Properties.ValidationSettings.Display = Display.Dynamic;
                cfg.Properties.ValidationSettings.RequiredField.IsRequired = true;
            }).Bind(DataBinder.Eval(item, "IssuedDate")).GetHtml();

            Html.DevExpress().Label(lbl => { lbl.ControlStyle.CssClass = "fl"; lbl.Text = "CTC Number:"; lbl.AssociatedControlName = "CTC"; }).GetHtml();
            Html.DevExpress().TextBox(cfg => {
                cfg.Name = "CTC";
                cfg.Properties.ValidationSettings.Display = Display.Dynamic;
                cfg.Properties.ValidationSettings.RequiredField.IsRequired = true;
                cfg.Properties.ClientSideEvents.KeyDown = "PreventLetters";
            }).Bind(DataBinder.Eval(item, "CTC")).GetHtml();

            Html.DevExpress().Label(lbl => { lbl.ControlStyle.CssClass = "fl"; lbl.Text = "CTC Date:"; lbl.AssociatedControlName = "CTCDate"; }).GetHtml();
            Html.DevExpress().DateEdit(cfg => {
                cfg.Name = "CTCDate";
                cfg.Properties.EditFormat = EditFormat.DateTime;
                cfg.Properties.DisplayFormatString = "MM/dd/yyyy";
                cfg.ShowModelErrors = true;
                cfg.Properties.ValidationSettings.Display = Display.Dynamic;
                cfg.Properties.ValidationSettings.RequiredField.IsRequired = true;
            }).Bind(DataBinder.Eval(item, "CTCDate")).GetHtml();
            Html.DevExpress().Label(lbl => { lbl.ControlStyle.CssClass = "fl"; lbl.Text = "CTC Place Issued:"; lbl.AssociatedControlName = "CTCPlaceIssued"; }).GetHtml();
            Html.DevExpress().TextBox(cfg => {
                cfg.Name = "CTCPlaceIssued";
                cfg.Properties.ValidationSettings.Display = Display.Dynamic;
                cfg.Properties.ValidationSettings.RequiredField.IsRequired = true;

            }).Bind(DataBinder.Eval(item, "CTCPlaceIssued")).Render();

            Html.DevExpress().Label(lbl => { lbl.ControlStyle.CssClass = "fl"; lbl.Text = "OR:"; lbl.AssociatedControlName = "ORNumber"; }).GetHtml();
            Html.DevExpress().TextBox(cfg => {
                cfg.Name = "ORNumber";
                cfg.Properties.ValidationSettings.Display = Display.Dynamic;
                cfg.Properties.ValidationSettings.RequiredField.IsRequired = true;
                cfg.Properties.ClientSideEvents.KeyDown = "PreventLetters";
            }).Bind(DataBinder.Eval(item, "ORNumber")).GetHtml();
            Html.DevExpress().Label(lbl => { lbl.ControlStyle.CssClass = "fl"; lbl.Text = "Amount:"; lbl.AssociatedControlName = "Amount"; }).GetHtml();
            Html.DevExpress().SpinEdit(cfg => {
                cfg.Properties.SpinButtons.ClientVisible = false;
                cfg.Name = "Amount";
                cfg.Properties.ValidationSettings.Display = Display.Dynamic;
                //cfg.Width = System.Web.UI.WebControls.Unit.Pixel(200);
                //cfg.Properties.MaxValue = 3000;
                //cfg.Properties.MinValue = 2010;
                cfg.Properties.ValidationSettings.RequiredField.IsRequired = true;
            }).Bind(DataBinder.Eval(item, "Amount")).GetHtml();
            Html.DevExpress().Label(lbl => { lbl.ControlStyle.CssClass = "fl"; lbl.Text = "Years Of Stay:"; lbl.AssociatedControlName = "YearsOfStay"; }).GetHtml();
            Html.DevExpress().SpinEdit(cfg => {
                cfg.Properties.SpinButtons.ClientVisible = false;
                cfg.Name = "YearsOfStay";
                cfg.Properties.ValidationSettings.Display = Display.Dynamic;
                //cfg.Width = System.Web.UI.WebControls.Unit.Pixel(200);
                //cfg.Properties.MaxValue = 3000;
                //cfg.Properties.MinValue = 2010;
                cfg.Properties.ValidationSettings.RequiredField.IsRequired = true;
            }).Bind(DataBinder.Eval(item, "YearsOfStay")).GetHtml();
            Html.DevExpress().Label(lbl => { lbl.ControlStyle.CssClass = "fl"; lbl.Text = "Comelec Reg.:"; lbl.AssociatedControlName = "Comelec"; }).GetHtml();
            Html.DevExpress().TextBox(cfg => {
                cfg.Name = "Comelec";
                cfg.Properties.ValidationSettings.Display = Display.Dynamic;
            }).Bind(DataBinder.Eval(item, "Comelec")).Render();


            ViewContext.Writer.Write("</div>");
            ViewContext.Writer.Write("<div class=\"editform col-md-6\" style='float:left;'>");
            Html.DevExpress().Label(lbl => { lbl.ControlStyle.CssClass = "fl"; lbl.Text = "Purpose:"; lbl.AssociatedControlName = "Purpose"; }).GetHtml();
            Html.DevExpress().CheckBoxList(cfg => {
                cfg.Name = "Purpose";
                cfg.Properties.ValueField = "Id";
                cfg.Properties.TextField = "Name";
                //cbl.Properties.ValueType = typeof(string);
                cfg.Properties.RepeatLayout = System.Web.UI.WebControls.RepeatLayout.Table;
                cfg.Properties.RepeatDirection = System.Web.UI.WebControls.RepeatDirection.Vertical;
                cfg.Properties.RepeatColumns = 1;
                cfg.Width = System.Web.UI.WebControls.Unit.Pixel(260);
                cfg.PreRender = (sender, e) => {
                    if (DataBinder.Eval(item, "MaintenanceTables") != null) {
                        var clearancePurposes = ((HashSet<MaintenanceTable>)DataBinder.Eval(item, "MaintenanceTables")).ToList();

                        string sPurposes = "";
                        foreach (var cPurposes in clearancePurposes) {
                            sPurposes = sPurposes + cPurposes.MaintenanceId.ToString() + ", ";
                        }
                        sPurposes = !string.IsNullOrEmpty(sPurposes) ? sPurposes.Substring(0, sPurposes.Length - 2) : sPurposes;

                        ASPxCheckBoxList cblb = (ASPxCheckBoxList)sender;

                        foreach (ListEditItem listItem in cblb.Items) {
                            listItem.Selected = sPurposes.Contains((string)listItem.Value.ToString());
                        }
                    }
                };
            }).BindList(ViewBag.Purpose).GetHtml();











            ViewContext.Writer.Write("</div>");
            ViewContext.Writer.Write("<div class=\"editform col-md-12\" style='float:left; padding-top:20px;'>");
            Html.DevExpress().Button(btn => {
                btn.ControlStyle.CssClass = "fl";
                btn.Name = "btnSave";
                btn.Text = "Save";
                btn.Style[HtmlTextWriterStyle.MarginLeft] = "5px";
                btn.UseSubmitBehavior = false;
                //btn.ClientSideEvents.Click = "function(s, e){ gvClearances.UpdateEdit(); }";
                btn.ClientSideEvents.Click = "SaveClearance";
            }).Render();
            Html.DevExpress().Button(btn => {
                btn.ControlStyle.CssClass = "fl";
                btn.Name = "btnCancelTab"; btn.Text = "Cancel";
                btn.UseSubmitBehavior = false;
                btn.ClientSideEvents.Click = "function(s, e){ gvClearances.CancelEdit(); }";
            }).Render();

            ViewContext.Writer.Write("</div>");
        });

    });
    if (ViewData["EditError"] != null) {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()